{
    "summary": "The code searches for files with a specific suffix, shuffles and splits them into train, validation, and test sets, ensuring reproducibility, and outputs a \"done\" message upon completion.",
    "details": [
        {
            "comment": "This code finds all files with a specified suffix (.jpg in this case) in the given directory, shuffles them, and splits them into train, validation, and test sets by moving the files to their respective directories. The random seed is set for reproducibility.",
            "location": "\"/media/root/Toshiba XG3/works/CogVLM/docs/src/utils/split_dataset.py\":0-33",
            "content": "import os\nimport shutil\ndef find_all_files(path, suffix=\".jpg\"):\n    target_files = []\n    for cur_dir, _, files in os.walk(path, followlinks=True):\n        for f in files:\n            if f.endswith(suffix):\n                target_files.append(os.path.join(cur_dir, f))\n    print(f'find {len(target_files)} files...')\n    return target_files\nall_files = find_all_files('archive')\nos.makedirs(\"archive_split\", exist_ok=True)\nos.makedirs(\"archive_split/train\", exist_ok=True)\nos.makedirs(\"archive_split/valid\", exist_ok=True)\nos.makedirs(\"archive_split/test\", exist_ok=True)\nimport random\nrandom.seed(2023)\nrandom.shuffle(all_files)\ntrain = all_files[:8000]\nvalid = all_files[8000:8000+500]\ntest = all_files[8000+500:8000+500+1500]\nprint(\"building train\")\nfor file in train:\n    shutil.move(file, os.path.join(\"archive_split/train\", file.split(\"/\")[-1]))\nprint(\"building valid\")\nfor file in valid:\n    shutil.move(file, os.path.join(\"archive_split/valid\", file.split(\"/\")[-1]))\nprint(\"building test\")\nfor file in test:\n    shutil.move(file, os.path.join(\"archive_split/test\", file.split(\"/\")[-1]))"
        },
        {
            "comment": "Prints \"done\" message indicating task completion.",
            "location": "\"/media/root/Toshiba XG3/works/CogVLM/docs/src/utils/split_dataset.py\":34-34",
            "content": "print(\"done\")"
        }
    ]
}