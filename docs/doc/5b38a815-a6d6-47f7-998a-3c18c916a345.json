{
    "summary": "The code consists of two functions, 'append_conversation' and 'main', responsible for appending and displaying conversations, handling chat inputs, updating and resetting history if needed. It is part of a conversation agent system for the CogVLM platform that utilizes models like 'agent_chat'.",
    "details": [
        {
            "comment": "This code imports necessary libraries and defines two functions. The 'append_conversation' function appends a conversation to a history list and displays it, while the 'main' function handles user inputs for chat and resets the chat history if prompt_text is empty.",
            "location": "\"/media/root/Toshiba XG3/works/CogVLM/docs/src/composite_demo/demo_agent_cogagent.py\":0-39",
            "content": "from io import BytesIO\nimport base64\nimport streamlit as st\nimport re\nfrom streamlit.delta_generator import DeltaGenerator\nfrom client import get_client\nfrom conversation import postprocess_text, Conversation, Role, postprocess_image\nfrom PIL import Image\nfrom utils import images_are_same\nclient = get_client()\ndef append_conversation(\n        conversation: Conversation,\n        history: list[Conversation],\n        placeholder: DeltaGenerator | None = None,\n) -> None:\n    history.append(conversation)\n    conversation.show(placeholder)\ndef main(\n        top_p: float = 0.8,\n        temperature: float = 0.95,\n        prompt_text: str = \"\",\n        metadata: str = \"\",\n        top_k: int = 2,\n        max_new_tokens: int = 2048,\n        grounding: bool = False,\n        retry: bool = False,\n        template: str = \"\"\n):\n    if 'chat_history' not in st.session_state:\n        st.session_state.chat_history = []\n    if prompt_text == \"\" and retry == False:\n        print(\"\\n== Clean ==\\n\")\n        st.session_state.chat_history = []"
        },
        {
            "comment": "The code retrieves a list of conversations from session state, displays each conversation, checks for a previous user conversation to retrieve its content, removes conversations after the last user one if retry is True, and if there's still prompt text available, it opens an image, resizes it, assigns it as image_input, and finally checks whether this new image or the last user's image in the history are the same (if any), and if they are, the image_input is set to None.",
            "location": "\"/media/root/Toshiba XG3/works/CogVLM/docs/src/composite_demo/demo_agent_cogagent.py\":40-64",
            "content": "        return\n    history: list[Conversation] = st.session_state.chat_history\n    for conversation in history:\n        conversation.show()\n    if retry:\n        print(\"\\n== Retry ==\\n\")\n        last_user_conversation_idx = None\n        for idx, conversation in enumerate(history):\n            if conversation.role == Role.USER:\n                last_user_conversation_idx = idx\n        if last_user_conversation_idx is not None:\n            prompt_text = history[last_user_conversation_idx].content_show\n            del history[last_user_conversation_idx:]\n    if prompt_text:\n        image = Image.open(BytesIO(base64.b64decode(metadata))).convert('RGB') if metadata else None\n        image.thumbnail((1120, 1120))\n        image_input = image\n        if history and image:\n            last_user_image = next(\n                (conv.image for conv in reversed(history) if conv.role == Role.USER and conv.image), None)\n            if last_user_image and images_are_same(image, last_user_image):\n                image_input = None"
        },
        {
            "comment": "The code is creating a user conversation object, setting translation parameters if the prompt text contains Chinese characters, and appending it to the conversation history. It also initializes an empty placeholder for the assistant's response.",
            "location": "\"/media/root/Toshiba XG3/works/CogVLM/docs/src/composite_demo/demo_agent_cogagent.py\":66-92",
            "content": "            # Not necessary to clear history\n            # else:\n            #     # new picture means new conversation\n            #     st.session_state.chat_history = []\n            #     history = []\n        # Set conversation\n        if re.search('[\\u4e00-\\u9fff]', prompt_text):\n            translate = True\n        else:\n            translate = False\n        user_conversation = Conversation(\n            role=Role.USER,\n            translate=translate,\n            content_show=prompt_text.strip() if retry else postprocess_text(template=template,\n                                                                            text=prompt_text.strip()),\n            image=image_input\n        )\n        append_conversation(user_conversation, history)\n        placeholder = st.empty()\n        assistant_conversation = placeholder.chat_message(name=\"assistant\", avatar=\"assistant\")\n        assistant_conversation = assistant_conversation.empty()\n        # steam Answer\n        output_text = ''\n        for response in client.generate_stream("
        },
        {
            "comment": "This code appears to be part of a conversation agent system, specifically designed for the CogVLM platform. It takes user input, generates a response using a model such as 'agent_chat', and returns output text and potentially an image using postprocess_image() function. The conversation is then updated with the new content, and appended to a history log.",
            "location": "\"/media/root/Toshiba XG3/works/CogVLM/docs/src/composite_demo/demo_agent_cogagent.py\":93-118",
            "content": "                model_use='agent_chat',\n                grounding=grounding,\n                history=history,\n                do_sample=True,\n                max_new_tokens=max_new_tokens,\n                temperature=temperature,\n                top_p=top_p,\n                top_k=top_k,\n        ):\n            output_text += response.token.text\n            assistant_conversation.markdown(output_text.strip() + '\u258c')\n        ## Final Answer with image.\n        print(\"\\n==Output:==\\n\", output_text)\n        content_output, image_output = postprocess_image(output_text, image)\n        assistant_conversation = Conversation(\n            role=Role.ASSISTANT,\n            content=content_output,\n            image=image_output,\n            translate=translate,\n        )\n        append_conversation(\n            conversation=assistant_conversation,\n            history=history,\n            placeholder=placeholder.chat_message(name=\"assistant\", avatar=\"assistant\"),\n        )"
        }
    ]
}